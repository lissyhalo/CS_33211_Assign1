# CS 33211 Assignment 1
# Melissa Halozan
# Producer-Consumer
# build and run in WSL2 under windows10
#
# make items with tick, tock string and item number count up
# producer creates items in shared buffer, consumer reads them and prints results
# initial versions of programs output item count for each item transferred and ran forever
# in final version only consumer prints output, and only first 2 items per ever 10000 items received
#

////////////////////////////////////////////////////////////////////////////////
//  producer.cpp
//   produce items and put into buffer in shared memory
//   sync with consumer to maintain buffer level by using semaphores
//
//   use 3 named semaphores to control access to shared memory buffer
//     mutex: binary semaphore, lock access to shared memory, initial value = 1 unlocked
//     full: counting semaphore, number in buffer, initial value = 0 nothing in buffer
//     empty: counting semaphore, number of empty spots in buffer, initial value = 2 open locations in buffer
//     
//     producer processing:
//     create an item that can be transferred
//     wait for empty spot in shared memory : wait if empty semaphore = 0
//     wait for access to buffer : wait if mutex semephore = 0
//     producer writes an item to buffer in shared memory
//     increments full semaphore to signal that new item is in buffer
//     repeat (exit if exceed test MAX_TRANSFERS)
//
////////////////////////////////////////////////////////////////////////////////
//  consumer.cpp
//   get items from shared buffer
//   sync with producer to maintain buffer level by using semaphores
//
//   use 3 named semaphores to control access to shared memory buffer
//     mutex: binary semaphore, lock access to shared memory, initial value = 1 unlocked
//     full: counting semaphore, number in buffer, initial value = 0 nothing in buffer
//     empty: counting semaphore, number of empty spots in buffer, initial value = 2 open locations in buffer
//     
//     consumer processing:
//     wait for item in buffer : wait if full semaphore = 0
//     wait for access to buffer : wait if mutex semephore = 0
//     reads an item from buffer in shared memory
//     output item data fields to stdout
//     increments empty semaphore to signal that spot is open in buffer
//     repeat (exit if exceed test MAX_TRANSFERS)
//
//     wait until data is in buffer before trying to access
//     this prevents possibility that producer did not create shared memory before consumer tries to access
//       (added this during debug, but problem may just have been wrong use of shm_unlink(name); in producer)
//
////////////////////////////////////////////////////////////////////////////////



# compile
g++ producer.cpp -pthread -lrt -o producer
g++ consumer.cpp -pthread -lrt -o consumer

# run both in background and send stdout and stderr to files
./producer &> out_prod.txt & ./consumer &> out_con.txt &
#   warning - files can grow unbounded, doesn't stop until your disk is full!


# see results
more out_prod.txt 
more out_con.txt 
 
# check what processes are running so you can stop them
ps
kill ### (pid)
kill 18360
kill 18361


# use this to run producer in the background, but consumer in the foreground
# this makes it easier to see messages consumed and allow to kill consumer by CTRL-C
./producer & ./consumer 
 
